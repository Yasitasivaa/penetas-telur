#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHT.h>
#include <DHT_U.h>
#include <Servo.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
Servo myServo;
DHT dht(2,DHT22);

// WiFi
const char *ssid = "vivo Y33s"; // Enter your WiFi name
const char *password = "sandisusah";  // Enter WiFi password

// MQTT Broker
const char *mqtt_broker = "192.168.77.40";
const char *mqtt_username = "emqx";
const int mqtt_port = 1883;

WiFiClient espclient;
PubSubClient Client(espclient);

// 'bilal', 128x64px
const unsigned char epd_bitmap_bilal [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xdf, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x1f, 0x8f, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xcf, 
	0xff, 0xff, 0xff, 0xff, 0x0f, 0x8f, 0xf0, 0x3c, 0x60, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x8f, 
	0xff, 0xff, 0xff, 0xff, 0x87, 0x1f, 0xe0, 0x3f, 0xfd, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x9f, 
	0xff, 0xff, 0xff, 0xbf, 0xc2, 0x3f, 0xe1, 0x3f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x1f, 
	0xff, 0xff, 0xff, 0x8f, 0xe0, 0x3f, 0xe0, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x8f, 0xf0, 0x3f, 
	0xff, 0xff, 0xff, 0x03, 0xf0, 0x7f, 0xe3, 0xff, 0xf8, 0x40, 0xff, 0xff, 0xff, 0x03, 0xf8, 0x7f, 
	0xff, 0xff, 0xfe, 0x00, 0xf8, 0x7f, 0xf3, 0x3f, 0xe0, 0x00, 0xff, 0xff, 0xff, 0x00, 0xfc, 0x7f, 
	0xff, 0xff, 0xff, 0x10, 0x3c, 0xff, 0xf8, 0x03, 0xc6, 0x78, 0xbf, 0xff, 0xff, 0x90, 0x7e, 0xff, 
	0xff, 0xff, 0xff, 0x88, 0x1f, 0xff, 0xf3, 0xc7, 0xd0, 0x39, 0x3f, 0xff, 0xff, 0x8c, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0x8e, 0x07, 0xff, 0xeb, 0x07, 0xe0, 0x39, 0x3f, 0xff, 0xff, 0xcf, 0x07, 0xff, 
	0xff, 0xff, 0xff, 0xc6, 0x03, 0xff, 0xe3, 0x43, 0xe8, 0xf9, 0x3f, 0xff, 0xff, 0xc6, 0x03, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x67, 0xff, 0xfb, 0xe1, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xe2, 0x63, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xfb, 0xff, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xfb, 0xfd, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xf7, 0xfb, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x7f, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0xbf, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xf8, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 
	0xff, 0xff, 0x1f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0x8f, 0xfb, 0xff, 0xff, 0x9f, 0xfe, 0x3f, 0xff, 
	0xff, 0xff, 0x0f, 0xfe, 0x7f, 0xff, 0xfd, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x0f, 0xff, 0x7f, 0xff, 
	0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x87, 0xff, 0x7f, 0xff, 
	0xff, 0xff, 0x83, 0xfb, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xf7, 0xff, 0xff, 0xc3, 0xfb, 0xff, 0xff, 
	0xff, 0xff, 0xc1, 0xf1, 0xff, 0xff, 0xfe, 0xf0, 0x01, 0xf7, 0xff, 0xff, 0xe1, 0xf9, 0xff, 0xff, 
	0xff, 0xf9, 0xf0, 0xf1, 0xff, 0xff, 0xff, 0xef, 0xcf, 0xff, 0xff, 0xfd, 0xf0, 0xf1, 0xff, 0xff, 
	0xff, 0xf9, 0xf8, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xf9, 0xf8, 0x63, 0xff, 0xff, 
	0xff, 0xf1, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0xff, 0xf9, 0xfc, 0x23, 0xff, 0xff, 
	0xff, 0xe3, 0xfe, 0x07, 0xff, 0xff, 0xff, 0x7f, 0xff, 0x37, 0xff, 0xf3, 0xfe, 0x07, 0xff, 0xff, 
	0xff, 0xe1, 0xff, 0x0f, 0xff, 0xff, 0xf8, 0x6f, 0xfe, 0x37, 0xff, 0xe1, 0xff, 0x0f, 0xff, 0xff, 
	0xff, 0xc0, 0xff, 0x9f, 0xff, 0xff, 0xf0, 0x77, 0xb8, 0x77, 0xff, 0xe0, 0xff, 0x8f, 0xff, 0xff, 
	0xff, 0xc0, 0x7f, 0xdf, 0xff, 0xff, 0xe8, 0x79, 0x00, 0x77, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xcc, 0x3f, 0xff, 0xff, 0xff, 0xc8, 0xfe, 0x00, 0xf7, 0xff, 0xcc, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0x89, 0xff, 0x00, 0xf3, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x0c, 0xff, 0xff, 0xff, 0xa1, 0xff, 0x80, 0xf1, 0xff, 0xff, 0x0e, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x71, 0xff, 0xc1, 0xc1, 0xff, 0xff, 0x84, 0x7f, 0xff, 0xff, 
	0xfe, 0x3f, 0xc0, 0xff, 0xf3, 0xc0, 0xe8, 0x3f, 0xe3, 0x82, 0xfe, 0x3f, 0xc0, 0xff, 0xff, 0xff, 
	0xfc, 0x1f, 0xe1, 0xff, 0xf3, 0xfc, 0xb0, 0x07, 0xc1, 0x01, 0x7c, 0x1f, 0xe1, 0xff, 0xff, 0xff, 
	0xf8, 0x0f, 0xf3, 0xff, 0xe3, 0xfe, 0x68, 0x00, 0x00, 0x02, 0xcc, 0x0f, 0xf1, 0xff, 0xff, 0xff, 
	0xf8, 0x8f, 0xe3, 0xff, 0xd3, 0xfe, 0x48, 0x00, 0x00, 0x03, 0xb0, 0xcf, 0xf3, 0xff, 0xff, 0xff, 
	0xf1, 0xc1, 0xe7, 0xff, 0xb3, 0xfe, 0x38, 0x00, 0x00, 0x00, 0xf0, 0xc9, 0xe7, 0xff, 0xff, 0xff, 
	0xe3, 0xc0, 0xe7, 0xff, 0x5b, 0xfe, 0x52, 0x03, 0xc7, 0x87, 0xe1, 0x00, 0xf7, 0xff, 0xff, 0xff, 
	0xe1, 0x80, 0x7f, 0xfe, 0xeb, 0xfe, 0x10, 0x00, 0xff, 0xa5, 0x50, 0xc0, 0x7f, 0xff, 0xff, 0xff, 
	0xf0, 0x0c, 0x7f, 0xfc, 0xfb, 0xfe, 0x68, 0x00, 0x0f, 0x00, 0x70, 0x8c, 0x7f, 0xff, 0xff, 0xff, 
	0xf8, 0x1e, 0x7f, 0xfb, 0xe3, 0xfe, 0x10, 0x00, 0x00, 0x80, 0xdc, 0x06, 0x3f, 0xff, 0xff, 0xff, 
	0xfc, 0x1e, 0x7f, 0xf7, 0xb3, 0x80, 0x28, 0x00, 0x00, 0xa0, 0x34, 0x1c, 0x3f, 0xff, 0xff, 0xff, 
	0xfe, 0x0c, 0x7f, 0xff, 0xa3, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x06, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0x04, 0x7f, 0xfe, 0xc3, 0x0e, 0x00, 0x08, 0x04, 0x00, 0x15, 0x04, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0x80, 0xff, 0xd7, 0x93, 0x0e, 0x00, 0x01, 0x04, 0x04, 0x57, 0xc0, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0xff, 0x82, 0x42, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x40, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf1, 0xff, 0xbd, 0xc2, 0x0e, 0x34, 0x00, 0x00, 0xa9, 0x17, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfb, 0xff, 0xa3, 0x02, 0x1c, 0xa4, 0x00, 0x00, 0x01, 0x51, 0x60, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xed, 0x0a, 0x1c, 0xb4, 0x80, 0x14, 0x28, 0x15, 0x48, 0xbf, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x71, 0x02, 0x1c, 0xb5, 0xf4, 0x80, 0x2b, 0xd5, 0xc2, 0x7f, 0xff, 0xff, 0xff
};



// 'gali', 128x64px
const unsigned char epd_bitmap_gali [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x1f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xfe, 0x1f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x33, 0xff, 
	0xff, 0xff, 0xff, 0xef, 0xff, 0xf8, 0x0f, 0xfc, 0x7f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 
	0xff, 0xff, 0xff, 0xc7, 0xff, 0xf8, 0x10, 0x0c, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 
	0xff, 0xff, 0xff, 0xf1, 0xff, 0xf8, 0x00, 0x0e, 0x03, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xf8, 0x03, 0x8e, 0x03, 0x9f, 0xff, 0xff, 0xff, 0xfe, 0x78, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf8, 0x00, 0x0f, 0x07, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0xff, 
	0xff, 0xff, 0xff, 0xf2, 0x3f, 0xfc, 0x00, 0x8f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 
	0xff, 0xff, 0xfe, 0x27, 0xff, 0xfc, 0x40, 0x0f, 0xff, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 
	0xff, 0xff, 0xff, 0x07, 0xff, 0xfc, 0x40, 0xcf, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 
	0xff, 0xff, 0xff, 0x8f, 0xff, 0xfc, 0x4f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 
	0xff, 0xff, 0xfd, 0xe7, 0xff, 0xfc, 0x5f, 0xc7, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xf1, 0xff, 0xfe, 0x6f, 0xc0, 0x7f, 0xef, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xff, 
	0xff, 0xff, 0xfc, 0x79, 0xff, 0xfc, 0x0f, 0x83, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xe7, 0xff, 
	0xff, 0xff, 0xff, 0x3f, 0xff, 0xfc, 0x03, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe7, 0xff, 
	0xff, 0xff, 0xff, 0x8f, 0xff, 0xfc, 0x01, 0x85, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x2f, 0xff, 
	0xff, 0xff, 0xff, 0xc7, 0xff, 0xfc, 0x00, 0x80, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xe7, 0xff, 0xfc, 0x00, 0x00, 0x47, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
	0xff, 0xff, 0xdf, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0xff, 0xcf, 0xcf, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 
	0xff, 0xff, 0xe3, 0xdf, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x90, 0x3f, 0xff, 
	0xff, 0xff, 0xf1, 0x9f, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf0, 0x01, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xcd, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 
	0xff, 0xfe, 0xff, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
	0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 
	0xff, 0xfe, 0x40, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xfc, 0xf9, 0xff, 0xff, 
	0xff, 0xfe, 0x70, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xf8, 0xfd, 0xff, 0xff, 
	0xff, 0xff, 0x37, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xf9, 0xcd, 0xff, 0xff, 
	0xff, 0xff, 0xa7, 0xff, 0xff, 0xff, 0xfe, 0x60, 0x1f, 0xff, 0xff, 0xff, 0xf3, 0xc3, 0xff, 0xff, 
	0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x70, 0x3f, 0xff, 0xff, 0xff, 0xf3, 0xf3, 0xff, 0xff, 
	0xff, 0xf7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x78, 0x1f, 0xf7, 0xff, 0xff, 0xf3, 0xf3, 0xff, 0xff, 
	0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x1f, 0xf7, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xff, 
	0xff, 0xcf, 0xe7, 0xff, 0xff, 0xff, 0x8f, 0x1f, 0x1f, 0xe7, 0xff, 0xff, 0xf8, 0xe7, 0xff, 0xff, 
	0xff, 0xde, 0x6f, 0xff, 0xff, 0xff, 0xe7, 0x87, 0xdf, 0xe5, 0xbf, 0xff, 0xfc, 0x07, 0xff, 0xff, 
	0xff, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xef, 0xe5, 0xdf, 0xff, 0xfe, 0x0f, 0xff, 0xff, 
	0xff, 0x9f, 0x9f, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xcd, 0x6b, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x9f, 0x9f, 0xff, 0xff, 0xff, 0xfa, 0x0f, 0xff, 0xc5, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xcf, 0xbf, 0xff, 0xff, 0xff, 0xfa, 0x0f, 0xff, 0xc6, 0xf4, 0x6f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc7, 0x3f, 0xff, 0xff, 0xff, 0xdb, 0xff, 0xff, 0xc6, 0xb6, 0x6d, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xde, 0xfa, 0x3d, 0x77, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x07, 0xff, 0xdc, 0xfb, 0x3d, 0xeb, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0x5b, 0x39, 0xd7, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x1f, 0xff, 0xef, 0xfd, 0x39, 0x37, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfc, 0x0f, 0xff, 0xff, 0xfd, 0x98, 0xa7, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x3e, 0x07, 0xff, 0xfb, 0xed, 0xb2, 0x2f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1e, 0x01, 0xff, 0xf1, 0xec, 0xb2, 0x2f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x0f, 0x80, 0x7f, 0xe0, 0x7e, 0xe2, 0x5f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x03, 0xf0, 0x1f, 0xc0, 0xfe, 0x62, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x81, 0xfe, 0x03, 0xc0, 0xfe, 0x62, 0x7f, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 2;
const unsigned char* epd_bitmap_allArray[2] = {
	epd_bitmap_bilal,
  	epd_bitmap_gali
};

//Variable Declaration
int T = 0.0;
int H = 0.0;
int sudut=0;
int P=0,PID_i=0,PID_d=0;
int Kp=50, Ki=30, Kd =1200;
float I;
float PID_error =0;
float previous_error =0;
float eT, Ti, tP;
float PID_value=0;
int Sp,pwm;



void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String Ms;
  for (int i = 0; i < length; i++) {
	Ms+=(char)payload[i];
  }
  Serial.println(Ms);
  myServo.write(Ms.toInt());
//  	if(topic=="servo"){
// 	Serial.print(Ms);
// 	myServo.write(Ms.toInt());
//    }
  Serial.println();
}

void reconnect(){
	String client_id = "penetas_telur";
    client_id += String(WiFi.macAddress());
    if (Client.connect(client_id.c_str())) {
		Client.subscribe("servo");
        Serial.println("Public emqx mqtt broker connected");
    } else {
        Serial.print("failed with state ");
        Serial.print(Client.state());
        delay(2000);
    }
}

void setup() {
  Serial.begin(9600);
  dht.begin();
  myServo.attach(D5);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000);
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  // Display static text
  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_gali , 128, 64, WHITE);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.drawBitmap(0,0, epd_bitmap_bilal,128, 64,WHITE);
  display.display();
  display.clearDisplay();
  delay(2000);
  // connect wifi
  WiFi.begin(ssid,password);
  while(WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.println("connecting to wifi");
    display.println("connecting to wifi");
    display.display();
    display.clearDisplay();
  }
  display.println("connected");
  Client.setServer(mqtt_broker,mqtt_port);
  Client.setCallback(callback);
}


void loop() {
//   int currentmillis = millis();
//   if(currentmillis - previousMillis >= interval){
//     // get temp value
//     float newT = dht.readTemperature();
//     if(isnan(newT)){
//       Serial.println("Failed to read temp from dht");
//     }else{
//       t=newT;
//     }
//     //get humid value
//     float newH = dht.readHumidity();
//     if(isnan(newT)){
//       Serial.println("Failed to read humid from dht");
//     }else{
//       h=newH;
//     }
//   }

   if(!Client.connected()){
	reconnect();
   }
   Client.loop();
   T = dht.readTemperature();
   H = dht.readHumidity();
   PID_error=Sp-T+1;
   P = 0.01*Kp*PID_error;
   I = 0.01*I+(Ki*PID_error);
   tP=Ti;
   Ti=millis();
   eT = (Ti - tP)/1000;
   PID_d = 0.01*Kd*((PID_error-previous_error)/eT);
   PID_value=P+I+PID_d;
   if(PID_value<0){PID_value=0;}
   if(PID_value>255){PID_value=250;}
   


  display.setCursor(0,0);
  display.setTextSize(2);
  display.println("  Penetas ");display.println("   Telur  ");
  display.print("Temp = ");display.print(T);display.println("C");
  display.print("Humid= ");display.print(H);display.println("%");
  display.display();
  delay(1000);
  display.clearDisplay();
}